[{"path":"https://dsu-effectiveness.github.io/utDataStoR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 utDataStoR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"demopgraphic-groups","dir":"Articles","previous_headings":"","what":"Demopgraphic Groups","title":"Groups","text":"Data classification collected student time application admission. data stored student level, student table. data doesn’t change often, can pulled Current, End Term Census.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"gender","dir":"Articles","previous_headings":"Demopgraphic Groups","what":"Gender","title":"Groups","text":"Gender biological sex student’s birth certificate. options : Male Female Unspecified","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"ipeds-raceethnicity","dir":"Articles","previous_headings":"Demopgraphic Groups","what":"IPEDS Race/Ethnicity","title":"Groups","text":"IPEDS Race/Ethnicity data reporting student’s race ethnicity. nine options: Hispanic American Indian/Alaskan Asian Black/African American Hawaiian/Pacific Islander White Multiracial Non-Resident Alien (visa’s) Unspecified","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"citizenship","dir":"Articles","previous_headings":"Demopgraphic Groups","what":"Citizenship","title":"Groups","text":"Citizenship student’s relationship United States. options : US Citizen Non-Res Alien-Visa temp bas Res Alien-immigrant status Non-Citizen National US Non-immigrant Alien 53B-8-106 Deferred Action Student curr defined ","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"international-student","dir":"Articles","previous_headings":"Demopgraphic Groups","what":"International Student","title":"Groups","text":"international student student foreign country (citizenship code Non_Res Alien-Visa) comes US take classes temporary F-1 visa. subset Non-Resident Alien students (see IPEDS Race/Ethnicity).","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"age-band","dir":"Articles","previous_headings":"Demopgraphic Groups","what":"Age Band","title":"Groups","text":"Age old student today based birth date. Reported : Less 18 18-24 25-34 35-44 44-59 60 plus","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"first-generation-student","dir":"Articles","previous_headings":"Demopgraphic Groups","what":"First Generation Student","title":"Groups","text":"first generation student student neither parent guardian received bachelor’s degree. application student asked either parent(s) guardian(s) received bachelor degree, respond student first generation student. respond yes don’t answer student first generation student.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"veteran","dir":"Articles","previous_headings":"Demopgraphic Groups","what":"Veteran","title":"Groups","text":"veteran student served armed forces receiving veteran benefits (including family members).","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"student-athlete","dir":"Articles","previous_headings":"Demopgraphic Groups","what":"Student Athlete","title":"Groups","text":"student athlete student EVER official team roster first scheduled contest date NCAA competition.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"first-admit-country","dir":"Articles","previous_headings":"Demopgraphic Groups","what":"First Admit Country","title":"Groups","text":"First admit country country listed students first application admitted.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"first-admit-state","dir":"Articles","previous_headings":"Demopgraphic Groups","what":"First Admit State","title":"Groups","text":"First admit state state listed students first application admitted. Students US get grouped Foreign State.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"first-admit-county","dir":"Articles","previous_headings":"Demopgraphic Groups","what":"First Admit County","title":"Groups","text":"First admit county county listed student first application admitted. Students Utah get grouped state, US; state, US.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"sql-for-demographic-groups","dir":"Articles","previous_headings":"Demopgraphic Groups","what":"SQL for Demographic Groups","title":"Groups","text":"","code":"SELECT a.student_id,        CASE            WHEN a.gender_code = 'M' THEN 'Male'            WHEN a.gender_code = 'F' THEN 'Female'            ELSE 'Unspecified'            END AS gender_desc,        a.ipeds_race_ethnicity,        a.us_citizenship_desc,        a.is_international,        CASE               WHEN EXTRACT(YEAR from AGE(current_date, a.birth_date)) < 18 THEN 'less than 18'               WHEN EXTRACT(YEAR from AGE(current_date, a.birth_date)) BETWEEN 18 and 24 THEN '18 to 24'               WHEN EXTRACT(YEAR from AGE(current_date, a.birth_date)) BETWEEN 25 and 34 THEN '25 to 34'               WHEN EXTRACT(YEAR from AGE(current_date, a.birth_date)) BETWEEN 35 and 44 THEN '35 to 44'               WHEN EXTRACT(YEAR from AGE(current_date, a.birth_date)) BETWEEN 45 and 59 THEN '45 to 59'               WHEN EXTRACT(YEAR from AGE(current_date, a.birth_date)) > 59 THEN '60 plus'               ELSE 'error'           END AS age_band,        a.is_first_generation,        a.is_athlete,        a.is_veteran,        a.first_admit_country_desc,        a.first_admit_state_desc,        a.first_admit_county_desc   FROM export.student a"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"term-based-groups","dir":"Articles","previous_headings":"","what":"Term Based Groups","title":"Groups","text":"Data classification can change semester based information system current term program, credit hours attempted, etc. data stored student term level, student_term_level table. data changes often, can pulled Current, End Term Census.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"college","dir":"Articles","previous_headings":"Term Based Groups","what":"College","title":"Groups","text":"Students placed colleges based primary program student declared. Programs assigned department departments assigned colleges. eight options: BU - College Business ED - College Education FA - College Fine Arts CE - College Global Community Outreach HO - College Health Sciences HU - College Humanities Social Sciences SC - College Science, Engineering Technology UC - University College","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"department","dir":"Articles","previous_headings":"Term Based Groups","what":"Department","title":"Groups","text":"Students placed departments based primary program student declared. Programs assigned department departments assigned colleges.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"program","dir":"Articles","previous_headings":"Term Based Groups","what":"Program","title":"Groups","text":"Students declare program study point application. Programs assigned department departments assigned colleges.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"degree-seeking-student","dir":"Articles","previous_headings":"Term Based Groups","what":"Degree Seeking Student","title":"Groups","text":"student degree seeking student students primary program leads credential.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"student-type","dir":"Articles","previous_headings":"Term Based Groups","what":"Student Type","title":"Groups","text":"Student Type student’s enrollment status registration status term. options : H - High School F - Freshman C - Continuing Registration R - Readmit T - Transfer P - Personal Interest, Non-Degree 1 - New Graduate 2 - Transfer Graduate 3 - Readmit Graduate 5 - Continuing Graduate","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"student-level","dir":"Articles","previous_headings":"Term Based Groups","what":"Student Level","title":"Groups","text":"student’s level level primary degree student pursing. options : Undergraduate Graduate.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"class-level","dir":"Articles","previous_headings":"Term Based Groups","what":"Class Level","title":"Groups","text":"student’s class level based overall cumulative earned credit hours. student’s class level year school, based credit hours. can sophomores first semester, well freshmen third year. graduate students reported Graduate. undergraduate students, options : Freshman <30 credit hours Sophomore 30-59 credit hours Junior 60-89 credit hours Senior 90 credit hours","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"full-time-part-time","dir":"Articles","previous_headings":"Term Based Groups","what":"Full-time Part-time","title":"Groups","text":"Full-time Part-Time status student’s time commitment based many credit hours attempted student’s level given semester. options : Full-time Undergraduate students 12 credit hours, Graduate students 9 credit hours Part-time Undergraduate students less 12 credit hours, Graduate students less 9 credit hours.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"residency","dir":"Articles","previous_headings":"Term Based Groups","what":"Residency","title":"Groups","text":"Residency state student resident listed system record. options : Resident Non-Resident Good Neighbor","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"high-school-student","dir":"Articles","previous_headings":"Term Based Groups","what":"High School Student","title":"Groups","text":"High School Student student taking course Utah Tech University still attending high school. High school subset Non-degree-seeking.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"non-matriculated","dir":"Articles","previous_headings":"Term Based Groups","what":"Non-Matriculated","title":"Groups","text":"non-degree-seeking student enrolled per sue personal interests, credential. Non-matriculated subset Non-degree-seeking.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"online-program-student","dir":"Articles","previous_headings":"Term Based Groups","what":"Online Program Student","title":"Groups","text":"Online Program Student student paying online tuition online program (program can completed online).","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"gpa-band","dir":"Articles","previous_headings":"Term Based Groups","what":"GPA Band","title":"Groups","text":"student’s GPA Overall Cumulative GPA. reported GPA band: new (null - GPA yet) 0-1.999 2-2.49 2.5-2.999 3-4.0","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"pell-eligible","dir":"Articles","previous_headings":"Term Based Groups","what":"Pell Eligible","title":"Groups","text":"Pell Eligible student student eligible receive Pell grant based FAFSA.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"student-athlete-1","dir":"Articles","previous_headings":"Term Based Groups","what":"Student Athlete","title":"Groups","text":"Student Athlete student official team roster first scheduled contest date NCAA competition semester. TRUE student athlete.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"sql-for-term-based-groups","dir":"Articles","previous_headings":"Term Based Groups","what":"SQL for Term Based Groups","title":"Groups","text":"","code":"SELECT a.student_id,        b.college_id,        b.department_desc,        a.primary_program_id,        a.is_degree_seeking,        a.student_type_desc,        a.level_desc,        a.primary_level_class_desc,        a.full_time_part_time_code,        a.residency_code_desc,        CASE            WHEN a.student_type_code = 'H' THEN TRUE            ELSE FALSE         END AS is_high_school,        CASE            WHEN a.student_type_code = 'P' THEN TRUE            ELSE FALSE         END AS is_non_matriculated,         CASE            WHEN a.primary_major_campus_id = 'O01' THEN 'TRUE'             ELSE 'FALSE'             END AS online_program_student,        CASE            WHEN a.overall_cumulative_gpa < 2.0 THEN '0_to_1.999'            WHEN a.overall_cumulative_gpa BETWEEN 2.0 AND 2.499 THEN '2_to_2.499'            WHEN a.overall_cumulative_gpa BETWEEN 2.5 AND 2.999 THEN '2.5_to_2.999'            WHEN a.overall_cumulative_gpa BETWEEN 3.0 AND 4 THEN '3_to_4'            ELSE 'new'         END AS gpa_band,        a.is_pell_eligible,        a.is_athlete   FROM export.student_term_level a   LEFT JOIN export.academic_programs b ON b.program_id = a.primary_program_id  WHERE a.is_enrolled IS TRUE    AND a.is_primary_level IS TRUE    AND a.is_current_term IS TRUE;"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"course-based-groups","dir":"Articles","previous_headings":"","what":"Course Based Groups","title":"Groups","text":"Data classification can change semester based courses student enrolled . data stored student term section level, student_term_section table. data changes often, can pulled Current, End Term Census.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"high-school-concurrent-enrollment-student","dir":"Articles","previous_headings":"Course Based Groups","what":"High School Concurrent Enrollment Student","title":"Groups","text":"High School Concurrent Enrollment student high school student enrolled least one funded concurrent enrollment class. High School Concurrent Enrollment students subset High School Students. high school student isn’t concurrent enrollment student student High School Student, .","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"sql-for-high-school-concurrent-enrollment-student","dir":"Articles","previous_headings":"Course Based Groups","what":"SQL for High School Concurrent Enrollment Student","title":"Groups","text":"","code":"WITH cte AS            (                SELECT a.budget_code,                       b.student_type_code,                       a.student_id,                       a.course_id,                       a.term_id                  FROM export.student_section a                           LEFT JOIN export.student_term_level b                                     ON b.student_id = a.student_id                                         AND b.term_id = a.term_id                                         AND b.is_primary_level IS TRUE                 WHERE a.is_enrolled IS TRUE                   AND a.is_current_term IS TRUE                 ORDER BY a.student_id            ),        concurrent_cte AS ( --this query flags student courses that are eligible for concurrent enrollment funds            SELECT a.student_id,                   a.term_id,                   CASE                       WHEN a.student_type_code = 'H' AND (a.budget_code IN ('BC', 'SF'))                           THEN TRUE                       ELSE FALSE                       END AS cte_concurrent_enrollment              FROM cte a        ) SELECT a.student_id,        a.term_id,        bool_or(cte_concurrent_enrollment) AS is_concurrent_enrollment   FROM concurrent_cte a  GROUP BY a.student_id, a.term_id"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"distance-education-status","dir":"Articles","previous_headings":"Course Based Groups","what":"Distance Education Status","title":"Groups","text":"Distance Education Status determines students courses Distance Education , Distance Education , Distance Education None. distance education course uses one types technology deliver instruction students separated instructor support regular substantive interaction students instructor synchronously asynchronously.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"sql-for-distance-education-status","dir":"Articles","previous_headings":"Course Based Groups","what":"SQL for Distance Education Status","title":"Groups","text":"","code":"SELECT a.student_id,        a.is_distance_ed_all,        a.is_distance_ed_some,        a.is_distance_ed_none   FROM export.student_term_level a  WHERE a.is_enrolled IS TRUE    AND a.is_primary_level IS TRUE    AND a.is_current_term IS TRUE"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"online-status","dir":"Articles","previous_headings":"Course Based Groups","what":"Online Status","title":"Groups","text":"Online Status determines students courses Online , Online , Online None. online course subset distance education courses. Online courses primarily delivered asynchronously; students work pace within timelines established instructor.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"sql-for-online-status","dir":"Articles","previous_headings":"Course Based Groups","what":"SQL for Online Status","title":"Groups","text":"","code":"SELECT student_id,        instruction_method_code_aggregated,        instruction_method_code_aggregated !~ '[I]'  AS online_none,        instruction_method_code_aggregated !~ '[^I]' AS online_all,        CASE            WHEN instruction_method_code_aggregated !~ '[^I]' THEN FALSE            WHEN instruction_method_code_aggregated ~ '[I]+' THEN TRUE            ELSE FALSE            END                                      AS online_some,        academic_year_code FROM (SELECT a.student_id,              STRING_AGG(instruction_method_code :: VARCHAR, ''                         ORDER BY instruction_method_code) AS instruction_method_code_aggregated,              b.academic_year_code       FROM export.student_section a                LEFT JOIN export.term b ON b.term_id = a.term_id       WHERE is_enrolled         AND season != 'Summer'       GROUP BY a.student_id,                b.academic_year_code) x"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"student-category","dir":"Articles","previous_headings":"Course Based Groups","what":"Student Category","title":"Groups","text":"student’s category based degree seeking status. options : Degree Seeking Non-Matriculated High School Concurrent Enrollment Students High School Students, ","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/groups.html","id":"sql-for-student-category","dir":"Articles","previous_headings":"Course Based Groups","what":"SQL for Student Category","title":"Groups","text":"","code":"WITH cte_degree_seeking AS          (SELECT a.student_id,                  a.term_id,                  a.is_degree_seeking           FROM export.student_term_level a           WHERE a.is_enrolled IS TRUE             AND a.is_primary_level IS TRUE             AND a.is_current_term IS TRUE           ORDER BY a.student_id),      cte_non_matriculated AS          (SELECT a.student_id,                  a.term_id,                  CASE                      WHEN a.student_type_code = 'P' THEN 'TRUE'                      ELSE 'FALSE'                      END AS is_non_matriculated           FROM export.student_term_level a           WHERE a.is_enrolled IS TRUE             AND a.is_primary_level IS TRUE             AND a.is_current_term IS TRUE           ORDER BY a.student_id),      cte_high_school AS          (SELECT a.student_id,                  a.term_id,                  CASE                      WHEN a.student_type_code = 'H' THEN 'TRUE'                      ELSE 'FALSE'                      END AS is_high_school           FROM export.student_term_level a           WHERE a.is_enrolled IS TRUE             AND a.is_primary_level IS TRUE             AND a.is_current_term IS TRUE           ORDER BY a.student_id),      cte_concurrent AS          (WITH cte AS                    (SELECT a.budget_code,                            b.student_type_code,                            a.student_id,                            a.course_id,                            a.term_id                     FROM export.student_section a                              LEFT JOIN export.student_term_level b                                        ON b.student_id = a.student_id                                            AND b.term_id = a.term_id                                            AND b.is_primary_level IS TRUE                     WHERE a.is_enrolled IS TRUE                       AND a.is_current_term IS TRUE                     ORDER BY a.student_id),                concurrent_cte AS ( --this query flags student courses that are eligible for concurrent enrollment funds                    SELECT a.student_id,                           a.term_id,                           CASE                               WHEN a.student_type_code = 'H' AND (a.budget_code IN ('BC', 'SF'))                                   THEN TRUE                               ELSE FALSE                               END AS cte_concurrent_enrollment                    FROM cte a)           SELECT a.student_id,                  a.term_id,                  bool_or(cte_concurrent_enrollment) AS is_concurrent_enrollment           FROM concurrent_cte a           GROUP BY a.student_id, a.term_id) SELECT a.student_id,        a.term_id,        b.is_degree_seeking,        c.is_non_matriculated,        d.is_high_school,        e.is_concurrent_enrollment,        CASE WHEN b.is_degree_seeking = 'TRUE' THEN 'degree-seeking'             WHEN c.is_non_matriculated = 'TRUE' THEN 'non-matriculated'             WHEN d.is_high_school = 'TRUE' AND e.is_concurrent_enrollment = 'TRUE' THEN 'high_school_concurrent'             WHEN d.is_high_school = 'TRUE' AND e.is_concurrent_enrollment = 'FALSE' THEN 'high_school_other'             ELSE 'error'             END AS student_categories FROM export.student_term_level a          LEFT JOIN cte_degree_seeking b                    ON b.student_id = a.student_id AND b.term_id = a.term_id          LEFT JOIN cte_non_matriculated c                    ON c.student_id = a.student_id AND c.term_id = a.term_id          LEFT JOIN cte_high_school d                    ON d.student_id = a.student_id AND d.term_id = a.term_id          LEFT JOIN cte_concurrent e                    ON e.student_id = a.student_id AND e.term_id = a.term_id WHERE a.is_enrolled IS TRUE   AND a.is_primary_level IS TRUE   AND a.is_current_term IS TRUE"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/headcount.html","id":"point-in-time-headcount","dir":"Articles","previous_headings":"","what":"Point In Time Headcount","title":"Headcount","text":"point time headcount snapshot current net unduplicated enrollment data calendar day academic term. Point time headcount data returns academic term, date, week year, number days official term start date, total headcount snapshot.","code":"SELECT term_id,        date,        date_part('week', date) - 11 AS week,        days_to_class_start,        COUNT(DISTINCT student_id) AS headcount FROM export.daily_enrollment WHERE term_id = '202340' AND is_enrolled IS TRUE GROUP BY term_id, date, days_to_class_start ORDER BY date DESC;"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/headcount.html","id":"current-headcount","dir":"Articles","previous_headings":"","what":"Current Headcount","title":"Headcount","text":"current net unduplicated headcount number students enrolled academic term. Current headcount can change daily academic term active data. current headcount may also change semester ends official changes made student record withdrawal status.","code":"SELECT a.term_desc,           COUNT(a.sis_system_id) AS current_headcount      FROM export.student_term_level_version a LEFT JOIN export.term b        ON a.term_id = b.term_id     WHERE a.is_enrolled IS TRUE       AND a.is_primary_level IS TRUE       AND a.version_desc = 'Current'       AND DATE_PART('year', NOW()) - b.academic_year_code :: INT <= 5 -- Current term plus last 5 Years.  GROUP BY a.term_desc  ORDER BY a.term_desc;"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/headcount.html","id":"census-headcount","dir":"Articles","previous_headings":"","what":"Census Headcount","title":"Headcount","text":"census headcount net unduplicated number students enrolled 15th day instruction academic term. Census headcount based snapshot data, headcount returns static headcount used reporting.","code":"... AND a.version_desc = 'Census' --Version description of snapshot status. ..."},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/headcount.html","id":"end-of-term-headcount","dir":"Articles","previous_headings":"","what":"End of Term Headcount","title":"Headcount","text":"end term headcount net unduplicated number students enrolled end semester high school concurrent enrollment grades entered. Based snapshot data, headcount returns static headcount used reporting.","code":"... AND a.version_desc = 'End of Term' --Version description of snapshot status. ..."},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/headcount.html","id":"ipeds-fall-enrollment-headcount","dir":"Articles","previous_headings":"","what":"IPEDS Fall Enrollment Headcount","title":"Headcount","text":"Fall Enrollment survey based snapshot Utah Tech’s unduplicated Fall census enrollment headcount used reporting annual IPEDS Fall Enrollment.","code":"... AND a.version_desc = 'Census' --Version description of snapshot status. ..."},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/headcount.html","id":"ipeds-12-month-enrollment-headcount","dir":"Articles","previous_headings":"","what":"IPEDS 12 Month Enrollment Headcount","title":"Headcount","text":"purpose 12-month Enrollment component IPEDS collect unduplicated census enrollment counts students enrolled credit instructional activity data 12-month period.","code":"SELECT b.academic_year_code,          COUNT(DISTINCT a.sis_system_id)      FROM export.student_term_level_version a LEFT JOIN export.term b        ON a.term_id = b.term_id     WHERE a.is_enrolled = TRUE       AND a.is_primary_level = TRUE       AND a.version_desc = 'Census'       AND b.academic_year_code = '2022'       AND b.season != 'Summer'  GROUP BY academic_year_code;"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/headcount.html","id":"ushe-headcount","dir":"Articles","previous_headings":"","what":"USHE Headcount","title":"Headcount","text":"USHE headcount reports unduplicated net enrollment headcount five times per fiscal year: Summer End Term Fall Census Fall End Term Spring Census Spring End Term Census: USHE Census Headcount net unduplicated number students enrolled 15th day instruction academic term. Census headcount based snapshot data, headcount returns static headcount may modified meet USHE reporting element criteria. End Term: USHE End Term Headcount net unduplicated number students enrolled end semester high school concurrent enrollment grades entered. Based snapshot data, headcount returns static headcount may modified meet USHE reporting element criteria.","code":"... AND a.version_desc = 'Census' --Version description of snapshot status. ... ... AND a.version_desc = 'End of Term' --Version description of snapshot status. ..."},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/retention.html","id":"cohort-retention","dir":"Articles","previous_headings":"","what":"Cohort retention","title":"Retention","text":"Degree seeking students assigned cohort enter University. eight cohorts students placed Full-time, Bachelors degree seeking, freshman Full-time, Bachelors degree seeking, transfer Part-time, Bachelors degree seeking, freshman Part-time, Bachelors degree seeking, transfer Full-time, Associates degree seeking, freshman Full-time, Associates degree seeking, transfer Part-time, Associates degree seeking, freshman Part-time, Associates degree seeking, transfer Cohort retention metrics track cohorts progress toward graduation. UT eight cohort retention metrics. denominator metric number student within cohort. numerator metric number students cohort enrolled census term indicated. Fall--spring cohort retention rate Fall--fall2 cohort retention rate Fall--fall3 cohort retention rate Fall--fall4 cohort retention rate","code":"SELECT a.student_id,            a.cohort_start_term_id,            a.is_exclusion,            -- Second fall return rate            a.is_returned_next_fall,            a.is_graduated_year_1,            -- Third fall return rate            a.is_returned_fall_3,            a.is_degree_completer_2,            -- Fourth fall return rate            a.is_returned_fall_4,            a.is_degree_completer_3,            c.primary_major_desc,            c.primary_degree_id,            c.primary_degree_desc,            d.college_abbrv,            d.college_desc,            e.first_name,            e.last_name,            e.gender_code,            e.ipeds_race_ethnicity,            e.is_veteran,            e.is_international,            e.is_athlete,            e.is_first_generation      FROM export.student_term_cohort a LEFT JOIN export.term b        ON b.term_id = a.cohort_start_term_id LEFT JOIN export.student_term_level_version c        ON c.student_id = a.student_id       AND c.term_id = a.cohort_start_term_id       AND c.is_enrolled       AND c.is_primary_level       AND c.is_census_version LEFT JOIN export.academic_programs d        ON d.program_id = c.primary_program_id LEFT JOIN export.student e        ON e.student_id = a.student_id     WHERE b.season = 'Fall'       AND a.cohort_desc = 'First-Time Freshman'       AND substr(a.cohort_start_term_id, 1, 4)::int >= (SELECT substr(term_id, 1, 4)::int - 5                                      FROM export.term                                      WHERE is_current_term)"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/articles/retention.html","id":"term-to-term","dir":"Articles","previous_headings":"","what":"Term-to-term","title":"Retention","text":"Term--term retention tracks students (degree seeking non-degree seeking) academic term term, regardless assigned cohort. denominator metric number students enrolled academic term. numerator metric number students still enrolled subsequent term. Term--term retention can calculated fall--fall basis fall--spring basis outcomes indicate status student. Term--term outcomes include: Associates: Student completed associates credential. Masters: Student completed masters credential. Dropped : Student enroll subsequent term. Stopped : Student temporarily withdraws enrolling subsequent terms. Enrolled: Student enrolled subsequent term.","code":"SELECT a.student_id,           a.term_id,           a.is_returned_next_spring,           a.is_returned_next_fall,           c.primary_major_desc,           c.primary_degree_id,           c.primary_degree_desc,           d.college_abbrv,           d.college_desc,           e.first_name,           e.last_name,           e.gender_code,           e.ipeds_race_ethnicity,           e.is_veteran,           e.is_international,           e.is_athlete,           e.is_first_generation,           COALESCE(f.is_exclusion, FALSE) AS is_exclusion,           COALESCE(f.cohort_start_term_id, 'None') AS cohort_start_term_id,           COALESCE(f.cohort_desc, 'None') AS cohort_type      FROM export.student_term_outcome a LEFT JOIN export.term b        ON b.term_id = a.term_id LEFT JOIN export.student_term_level_version c        ON c.student_id = a.student_id       AND c.term_id = a.term_id       AND c.is_enrolled       AND c.is_primary_level       AND c.is_census_version LEFT JOIN export.academic_programs d        ON d.program_id = c.primary_program_id LEFT JOIN export.student e        ON e.student_id = a.student_id LEFT JOIN export.student_term_cohort f        ON f.student_id = a.student_id       AND f.cohort_desc IN ('First-Time Freshman', 'Transfer')     WHERE b.season = 'Fall'       AND substr(a.term_id, 1, 4)::int >= (SELECT substr(term_id, 1, 4)::int - 5                                      FROM export.term                                      WHERE is_current_term)"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matt Nickodemus. Author, maintainer. Joy Baule. Author. Justin Pfeifer. Author.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nickodemus M, Baule J, Pfeifer J (2023). utDataStoR: SQL data sets Office Institutional Effectiveness. https://github.com/dsu-effectiveness/utDataStoR, https://dsu-effectiveness.github.io/utDataStoR/.","code":"@Manual{,   title = {utDataStoR: SQL and data sets for the Office of Institutional Effectiveness},   author = {Matt Nickodemus and Joy Baule and Justin Pfeifer},   year = {2023},   note = {https://github.com/dsu-effectiveness/utDataStoR, https://dsu-effectiveness.github.io/utDataStoR/}, }"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/index.html","id":"utdatastor-","dir":"","previous_headings":"","what":"SQL and data sets for the Office of Institutional Effectiveness","title":"SQL and data sets for the Office of Institutional Effectiveness","text":"goal utDataStoR centralize document standard SQL queries data sets used analysts Utah Tech University.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"SQL and data sets for the Office of Institutional Effectiveness","text":"can install development version utDataStoR GitHub :","code":"install.packages(\"devtools\") devtools::install_github(\"dsu-effectiveness/utDataStoR\", build_vignettes = TRUE)"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/create_sql_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Helper Functions — create_sql_dir","title":"Generate Helper Functions — create_sql_dir","text":"create_sql_dir generate path used house sql files based context parameter.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/create_sql_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Helper Functions — create_sql_dir","text":"","code":"create_sql_dir(context)"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/create_sql_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Helper Functions — create_sql_dir","text":"context context project.  \"project\", \"shiny\", \"sandbox\"","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/make_retention_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Retention Sql — make_retention_sql","title":"Generate Retention Sql — make_retention_sql","text":"make_retention_sql generate standard sql query pulling retention data Edify","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/make_retention_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Retention Sql — make_retention_sql","text":"","code":"make_retention_sql(name, type = \"term_to_term\")"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/make_retention_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Retention Sql — make_retention_sql","text":"name name want SQL file sql folder. type type retention file want. Defaults 'term_to_term'. type parameter term_to_term cohort","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/make_retention_sql.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Retention Sql — make_retention_sql","text":"sql file SQL folder","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_fte.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate FTE SQL — sql_fte","title":"Generate FTE SQL — sql_fte","text":"sql_fte generate standard sql query pulling FTE Edify, REPT DSCIR.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_fte.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate FTE SQL — sql_fte","text":"","code":"sql_fte(data_source = \"Edify\", name)"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_fte.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate FTE SQL — sql_fte","text":"data_source server full . Edify, REPT, DSCIR name name want SQL file sql folder.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_fte.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate FTE SQL — sql_fte","text":"sql file SQL folder","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_buildings.html","id":null,"dir":"Reference","previous_headings":"","what":"sql_validate_buildings will generate the standard sql query for pulling Building Validations from Edify.\nValidations are done through Edify. — sql_validate_buildings","title":"sql_validate_buildings will generate the standard sql query for pulling Building Validations from Edify.\nValidations are done through Edify. — sql_validate_buildings","text":"sql_validate_buildings generate standard sql query pulling Building Validations Edify. Validations done Edify.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_buildings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sql_validate_buildings will generate the standard sql query for pulling Building Validations from Edify.\nValidations are done through Edify. — sql_validate_buildings","text":"","code":"sql_validate_buildings(data_source, name, context)"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_buildings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sql_validate_buildings will generate the standard sql query for pulling Building Validations from Edify.\nValidations are done through Edify. — sql_validate_buildings","text":"data_source server full . Edify name name want SQL file sql folder. context context project.  \"project\", \"shiny\", \"sandbox\"","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_buildings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sql_validate_buildings will generate the standard sql query for pulling Building Validations from Edify.\nValidations are done through Edify. — sql_validate_buildings","text":"sql file SQL folder","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_courses.html","id":null,"dir":"Reference","previous_headings":"","what":"sql_validate_courses will generate the standard sql query for pulling Course Validations from Edify.\nValidations are done through Edify. — sql_validate_courses","title":"sql_validate_courses will generate the standard sql query for pulling Course Validations from Edify.\nValidations are done through Edify. — sql_validate_courses","text":"sql_validate_courses generate standard sql query pulling Course Validations Edify. Validations done Edify.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_courses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sql_validate_courses will generate the standard sql query for pulling Course Validations from Edify.\nValidations are done through Edify. — sql_validate_courses","text":"","code":"sql_validate_courses(data_source, name, context)"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_courses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sql_validate_courses will generate the standard sql query for pulling Course Validations from Edify.\nValidations are done through Edify. — sql_validate_courses","text":"data_source server full . Edify name name want SQL file sql folder. context context project.  \"project\", \"shiny\", \"sandbox\"","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_courses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sql_validate_courses will generate the standard sql query for pulling Course Validations from Edify.\nValidations are done through Edify. — sql_validate_courses","text":"sql file SQL folder","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_graduation.html","id":null,"dir":"Reference","previous_headings":"","what":"sql_validate_graduation will generate the standard sql query for pulling Graduation Validations from Edify.\nValidations are done through Edify. — sql_validate_graduation","title":"sql_validate_graduation will generate the standard sql query for pulling Graduation Validations from Edify.\nValidations are done through Edify. — sql_validate_graduation","text":"sql_validate_graduation generate standard sql query pulling Graduation Validations Edify. Validations done Edify.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_graduation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sql_validate_graduation will generate the standard sql query for pulling Graduation Validations from Edify.\nValidations are done through Edify. — sql_validate_graduation","text":"","code":"sql_validate_graduation(data_source, name, context)"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_graduation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sql_validate_graduation will generate the standard sql query for pulling Graduation Validations from Edify.\nValidations are done through Edify. — sql_validate_graduation","text":"data_source server full . Edify name name want SQL file sql folder. context context project.  \"project\", \"shiny\", \"sandbox\"","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_graduation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sql_validate_graduation will generate the standard sql query for pulling Graduation Validations from Edify.\nValidations are done through Edify. — sql_validate_graduation","text":"sql file SQL folder","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_rooms.html","id":null,"dir":"Reference","previous_headings":"","what":"sql_validate_rooms will generate the standard sql query for pulling Rooms Validations from Edify.\nValidations are done through Edify. — sql_validate_rooms","title":"sql_validate_rooms will generate the standard sql query for pulling Rooms Validations from Edify.\nValidations are done through Edify. — sql_validate_rooms","text":"sql_validate_rooms generate standard sql query pulling Rooms Validations Edify. Validations done Edify.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_rooms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sql_validate_rooms will generate the standard sql query for pulling Rooms Validations from Edify.\nValidations are done through Edify. — sql_validate_rooms","text":"","code":"sql_validate_rooms(data_source, name, context)"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_rooms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sql_validate_rooms will generate the standard sql query for pulling Rooms Validations from Edify.\nValidations are done through Edify. — sql_validate_rooms","text":"data_source server full . Edify name name want SQL file sql folder. context context project.  \"project\", \"shiny\", \"sandbox\"","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_rooms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sql_validate_rooms will generate the standard sql query for pulling Rooms Validations from Edify.\nValidations are done through Edify. — sql_validate_rooms","text":"sql file SQL folder","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_student.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Validation SQL — sql_validate_student","title":"Generate Validation SQL — sql_validate_student","text":"sql_validate_student generate standard sql query pulling Student Validations Edify. Validations done Edify.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_student.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Validation SQL — sql_validate_student","text":"","code":"sql_validate_student(data_source, name, context)"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_student.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Validation SQL — sql_validate_student","text":"data_source server full . Edify name name want SQL file sql folder. context context project.  \"project\", \"shiny\", \"sandbox\"","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_student.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Validation SQL — sql_validate_student","text":"sql file SQL folder","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_student_courses.html","id":null,"dir":"Reference","previous_headings":"","what":"sql_validate_student_courses will generate the standard sql query for pulling Student Course Validations from Edify.\nValidations are done through Edify. — sql_validate_student_courses","title":"sql_validate_student_courses will generate the standard sql query for pulling Student Course Validations from Edify.\nValidations are done through Edify. — sql_validate_student_courses","text":"sql_validate_student_courses generate standard sql query pulling Student Course Validations Edify. Validations done Edify.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_student_courses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sql_validate_student_courses will generate the standard sql query for pulling Student Course Validations from Edify.\nValidations are done through Edify. — sql_validate_student_courses","text":"","code":"sql_validate_student_courses(data_source, name, context)"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_student_courses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sql_validate_student_courses will generate the standard sql query for pulling Student Course Validations from Edify.\nValidations are done through Edify. — sql_validate_student_courses","text":"data_source server full . Edify name name want SQL file sql folder. context context project.  \"project\", \"shiny\", \"sandbox\"","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/sql_validate_student_courses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sql_validate_student_courses will generate the standard sql query for pulling Student Course Validations from Edify.\nValidations are done through Edify. — sql_validate_student_courses","text":"sql file SQL folder","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/write_sql_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Write SQL Files Functions — write_sql_file","title":"Write SQL Files Functions — write_sql_file","text":"write_sql_files copy move sql file based context parameter.","code":""},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/write_sql_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write SQL Files Functions — write_sql_file","text":"","code":"write_sql_file(file, folder, name, context)"},{"path":"https://dsu-effectiveness.github.io/utDataStoR/reference/write_sql_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write SQL Files Functions — write_sql_file","text":"file name sql file folder name folder sql stored name name sql file want create context context project.  \"project\", \"shiny\", \"sandbox\"","code":""}]
